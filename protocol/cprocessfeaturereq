public:
	uint32_t _image_seq;
	int	_x;
	int	_y;
	std::string _data;
	std::string _marshal_data;

public:
	enum
	{
		PROTOCOL_ID = PROTOCOL_ID_CPROCESSFEATUREREQ,
	};
	
	CProcessFeatureReq() : _image_seq(0), _x(0), _y(0) {}
	CProcessFeatureReq(uint32_t image_seq, int x, int y, std::string data) : _image_seq(image_seq), _x(x), _y(y), _data(data) {}
	~CProcessFeatureReq() {}

	virtual const std::string& Marshal()
	{
		// 1. 设置协议具体子段
		CProcessFeatureReqProto proto;
		proto.set_image_seq(_image_seq);
		proto.set_x(_x);
		proto.set_y(_y);
		proto.set_data(_data);
		// 2. 给协议wrap一层，添加protocol id
		CProto cproto;
		cproto.set_id(PROTOCOL_ID);
		cproto.set_body(proto.SerializeAsString());
		std::string data;
		cproto.SerializeToString(&data);
		// 3. 封包
		NetPacket packet;
		packet.header = 0xF0;
		packet.tail = 0x0F;
		packet.type = 1;
		packet.datalen = data.size();
		_marshal_data = PacketData(packet, data.c_str());
		return _marshal_data;
	}

	virtual void UnMarshal(const char* buf, int length)
	{
		CProcessFeatureReqProto proto;
		proto.ParseFromString(std::string(buf, length));
		_image_seq = proto.image_seq();
		_x = proto.x();
		_y = proto.y();
		_data = proto.data();
	}

    virtual Protocol* Clone()
    {
        return new CProcessFeatureReq();
    }
