public:
	uint32_t _result;
	std::vector<LeafGradeCount> _leaf_grade_counts;
	std::string _marshal_data;

public:
	enum
	{
		PROTOCOL_ID = PROTOCOL_ID_SENDBATCHPROCESSREP,
	};
	SEndBatchProcessRep() : _result(0) {}
	SEndBatchProcessRep(uint32_t result) : _result(result) {}
	~SEndBatchProcessRep() {}

	virtual const std::string& Marshal()
	{
		// 1. 设置协议具体子段
		SEndBatchProcessRepProto proto;
		proto.set_result(_result);
		for(std::vector<LeafGradeCount>::iterator it = _leaf_grade_counts.begin();
		    it != _leaf_grade_counts.end();
		    ++it)
		{
			LeafGradeCount* lgc = proto.add_leaf_grade_counts();
			lgc->set_group(it->group());
			lgc->set_rank(it->rank());
			lgc->set_count(it->count());
		}

		// 2. 给协议wrap一层，添加protocol id
		CProto cproto;
		cproto.set_id(PROTOCOL_ID);
		cproto.set_body(proto.SerializeAsString());
		std::string data;
		cproto.SerializeToString(&data);
		// 3. 封包
		NetPacket packet;
		packet.header = 0xF0;
		packet.tail = 0x0F;
		packet.type = 1;
		packet.datalen = data.size();
		_marshal_data = PacketData(packet, data.c_str());
		return _marshal_data;
	}

	virtual void UnMarshal(const char* buf, int length)
	{
		SEndBatchProcessRepProto proto;
		proto.ParseFromString(std::string(buf, length));
		_result = proto.result();
		for(int i = 0; i < proto.leaf_grade_counts_size(); ++i)
		{
			LeafGradeCount& lgc = proto.leaf_grade_counts(i);
			_leaf_grade_counts.push_back(lgc);
		}
	}

    virtual Protocol* Clone()
    {
        return new SEndBatchProcessRep();
    }
