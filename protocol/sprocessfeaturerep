public:
	int _image_seq;
	uint32_t _result;
	std::string _marshal_data;

public:
	enum
	{
		PROTOCOL_ID = PROTOCOL_ID_SPROCESSFEATUREREP,
	};
	SProcessFeatureRep() : _result(0) {}
	SProcessFeatureRep(int image_seq, uint32_t result) : _image_seq(image_seq), _result(result) {}
	~SProcessFeatureRep() {}

	virtual const std::string& Marshal()
	{
		// 1. 设置协议具体子段
		SProcessFeatureRepProto proto;
		proto.set_image_seq(_image_seq);
		proto.set_result(_result);
		// 2. 给协议wrap一层，添加protocol id
		CProto cproto;
		cproto.set_id(PROTOCOL_ID);
		cproto.set_body(proto.SerializeAsString());
		std::string data;
		cproto.SerializeToString(&data);
		// 3. 封包
		NetPacket packet;
		packet.header = 0xF0;
		packet.tail = 0x0F;
		packet.type = 1;
		packet.datalen = data.size();
		_marshal_data = PacketData(packet, data.c_str());
		return _marshal_data;
	}

	virtual void UnMarshal(const char* buf, int length)
	{
		SProcessFeatureRepProto proto;
		proto.ParseFromString(std::string(buf, length));
		_image_seq = proto.image_seq();
		_result = proto.result();
	}

    virtual Protocol* Clone()
    {
        return new SProcessFeatureRep();
    }
