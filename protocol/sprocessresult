public:
	uint32_t _result;
	int _level;
	std::string _data;
	std::string _marshal_data;

public:
	enum
	{
		PROTOCOL_ID = PROTOCOL_ID_SPROCESSRESULT,
	};
	SProcessResult() : _result(0), _level(0){}
	SProcessResult(uint32_t result, int level, std::string data) 
		: _result(result), _level(level), _data(data) 
	{
	}
	~SProcessResult() {}

	virtual const std::string& Marshal()
	{
		// 1. 设置协议具体子段
		SProcessResultProto proto;
		proto.set_result(_result);
		proto.set_level(_level);
		proto.set_data(_data);
		// 2. 给协议wrap一层，添加protocol id
		CProto cproto;
		cproto.set_id(PROTOCOL_ID);
		cproto.set_body(proto.SerializeAsString());
		std::string data;
		cproto.SerializeToString(&data);
		// 3. 封包
		NetPacket packet;
		packet.header = 0xF0;
		packet.tail = 0x0F;
		packet.type = 1;
		packet.datalen = data.size();
		_marshal_data = PacketData(packet, data.c_str());
		return _marshal_data;
	}

	virtual void UnMarshal(const char* buf, int length)
	{
		SProcessResultProto proto;
		proto.ParseFromString(std::string(buf, length));
		_result = proto.result();
		_level = proto.level();
		_data = proto.data();
	}

    virtual Protocol* Clone()
    {
        return new SProcessResult();
    }
